"#!/bin/bash-xesource/var/lib/cloud/scripts/include/instance_utils.shget_environment_groupexportFLYWHEEL_ENABLE=\"true\"exportREGION=\"us-east-1\"exportARGOS_AGENT_VERSION=\"0.0.1\"exportAPP_VERSION=\"1.0.0\"exportENV=\"$(get_target_tagEnvironment)\"exportTEAM=\"$(get_target_tagTeam)\"exportAPPLICATION=\"$(get_target_tagApplication)\"exportHOST_IP=\"$(curl-shttp://169.254.169.254/latest/dynamic/instance-identity/document|jq-r'.privateIp')\"exportAVAILABILITY_ZONE=\"$(curl-shttp://169.254.169.254/latest/dynamic/instance-identity/document|jq-r'.availabilityZone')\"exportACCOUNT_TYPE=\"${ENV_GROUP//$SHORT_ENV_GROUP/}\"#Declareconstantsforthedomainnamedeclare-APRIV_DOMAINPRIV_DOMAIN[\"lab\"]=\"lab.frgcloud.com\"PRIV_DOMAIN[\"cklab\"]=\"cklab.frgcloud.com\"PRIV_DOMAIN[\"clouddev\"]=\"clouddev.frgcloud.com\"PRIV_DOMAIN[\"ecomdev\"]=\"dev.frgcloud.com\"PRIV_DOMAIN[\"ecomqc\"]=\"qc.frgcloud.com\"PRIV_DOMAIN[\"ecomlpt\"]=\"lpt.frgcloud.com\"PRIV_DOMAIN[\"ecomprod\"]=\"prod.frgcloud.com\"PRIV_DOMAIN[\"anadev\"]=\"dev.frganalytics.com\"PRIV_DOMAIN[\"anaqc\"]=\"qc.frganalytics.com\"PRIV_DOMAIN[\"anaprod\"]=\"prod.frganalytics.com\"PRIV_DOMAIN[\"infraprod\"]=\"infraprod.frg.tech\"PRIV_DOMAIN[\"infradev\"]=\"infradev.frg.tech\"APP_DOMAIN=\"${ENV}.${APPLICATION}.service.${REGION}.dynamic.${PRIV_DOMAIN[$ENV_GROUP]}\"#FetchMeshVariableValuesMeshEnable=\"true\"MeshAutoRegister=\"true\"MeshAutoTLS=\"true\"MeshMode=\"legacy\"cat>\"env.list\"<<EOFACCOUNT_TYPE=${ACCOUNT_TYPE}APPLICATION=${APPLICATION}APP_DOMAIN=${APP_DOMAIN}APP_VERSION=${APP_VERSION}ENV=${ENV}REGION=${REGION}ENV_GROUP=${ENV_GROUP}FLYWHEEL_ENABLE=${FLYWHEEL_ENABLE}SHORT_ENV_GROUP=${SHORT_ENV_GROUP}AVAILABILITY_ZONE=${AVAILABILITY_ZONE}HOST_IP=${HOST_IP}HTTP_PROXY=${HTTP_PROXY}HTTPS_PROXY=${HTTP_PROXY}NO_PROXY=${NO_PROXY}PRIV_DOMAIN=${PRIV_DOMAIN[$ENV_GROUP]}SERVICE_MESH_ENABLE=${MeshEnable}SERVICE_MESH_AUTO_TLS=${MeshAutoTLS}SERVICE_MESH_AUTO_REGISTER=${MeshAutoRegister}SERVICE_MESH_MODE=${MeshMode}TEAM=${TEAM}AnotherVar=ForgoodmeasureBaseballTeam=That'sit.That'showteamnamesaresupposedtoworkMyEnv=EcomProdTestEOFmkdir-p/etc/cyphercat>\"/etc/cypher/config.json\"<<EOF{\"domain\":\"${APP_DOMAIN}\",\"envoy_uds_path\":\"/tmp/cypher_uds\",\"env_group\":\"${ENV_GROUP}\",\"environment\":\"${ENV}\",\"node_ip\":\"${HOST_IP}\",\"provider\":\"certinator\",\"lifecycle\":{\t\"auto_renew\":true,\t\"days_before_renewal\":14}}EOF#Setsuptheiptablesforallingress.Redirectsallincomingtrafficontheapplicationportto15001set_ingress_iptables(){iptables-tnat-APREROUTING-ieth0-ptcp--dport8443-jREDIRECT--to-port15001}#Startcypherstart_cypher(){source/etc/sysconfig/proxiesset_proxies#Createcyphervolumeandstartcypherdockervolumecreatecypherdockerrun-d--namecypher--restart=always-e\"HTTP_PROXY=${HTTP_PROXY}\"-e\"HTTPS_PROXY=${HTTP_PROXY}\"-e\"NO_PROXY=${NO_PROXY}\"-e\"APPLICATION=${APPLICATION}\"-eREGION=\"${REGION}\"--net=host-vcypher:/tmp-v/etc/cypher/config.json:/etc/cypher/config.jsondocker.repo.frg.tech/cypher:0.0.81agent}#Thisfucntionstartsenvoy_manager.Envoymanagereithergeneratestheconfigorfetchestheuserdefinedconfigsfroms3generate_mesh_configs(){dockerrun-it-d-v/etc/envoy:/etc/envoy-e\"TEAM=${TEAM}\"-e\"APPLICATION=${APPLICATION}\"-e\"ENV_GROUP=${ENV_GROUP}\"-e\"ENV=${ENV}\"-e\"SERVICE_MESH_MODE=${MeshMode}\"-e\"PORT=${PORT}\"docker.repo.frg.tech/envoy-manager:1.0.93}#Startupenvoystart_envoy(){dockerrun-d--nameenvoy--restarton-failure:3\\--net=host-vcypher:/tmp-v/etc/envoy:/etc/envoy\\-vgateway:/gatewaydocker.repo.frg.tech/envoy:v1.10.0\\-c\"/etc/envoy/envoy.yaml\"\\--service-zone\"${AVAILABILITY_ZONE}\"\\--service-node\"${APPLICATION}\"\\--service-cluster\"${ENV}\"#Startgostatsdtomonitorenvoy.cd/var/lib/statsd/newrelic-gostatsd/./install.sh#FutureThisscriptneedstofixedsothatitdoesnotreadfromarelativedirectorystr}#fetchesthecertsusinglegacymechanismandstoresitin/etc/ssl/certsdirfetch_certs_with_certinator(){source/etc/sysconfig/proxiesset_proxiescertinator-client--domain${APP_DOMAIN}--output-filecerts.tar--signed--verbosetar-xfcerts.tarinstall-oroot-groot-m600certs/\"${APP_DOMAIN}\"/*/etc/ssl/certs/rm-rfcerts*MountCert=\"-v/etc/ssl/:/etc/ssl\"}#IftheuserwantsautocertrenewautoTLSwouldbesettotrue.if[\"${MeshAutoTLS}\"==\"false\"&&\"${MeshAutoCertRenew}\"==\"true\"];then${MeshAutoTLS}=\"true\"fi#TODO:Thisshouldbemadelesscomplexbysimplyfyingtheinterfaceandaddvalidationsintheproviderif[\"${MeshAutoTLS}\"==\"true\"&&\"${MeshAutoCertRenew}\"==\"true\"&&(\"${MeshMode}\"==\"full\"||\"${MeshMode}\"==\"ingress\")];thengenerate_mesh_configs()start_cypher()start_envoy()elif[\"${MeshAutoTLS}\"==\"true\"&&\"${MeshAutoCertRenew}\"==\"true\"&&(\"${MeshMode}\"==\"legacy\"||\"${MeshMode}\"==\"egress\");thenecho\"MeshAutoCertRenewflagcan'tbetruewhileMeshModeislegacyoregress\"exit(1)elif[\"${MeshAutoTLS}\"==\"true\"&&\"${MeshAutoCertRenew}\"==\"false\"&&(\"${MeshMode}\"==\"full\"||\"${MeshMode}\"==\"ingress\");thenecho\"MeshAutoCertRenewflagcan'tbefalsewhileMeshModeisfulloringress\"exit(1)elif[\"${MeshAutoTLS}\"==\"true\"&&\"${MeshAutoCertRenew}\"==\"false\"&&(\"${MeshMode}\"==\"legacy\"||\"${MeshMode}\"==\"egress\");thengenerate_mesh_configs()fetch_certs_with_certinator()start_envoy()elif[\"${MeshAutoTLS}\"==\"true\"&&\"${MeshMode}\"==\"\"];thenfetch_certs_with_certinator()fidockerrun-d\\--restarton-failure:3\\${MountCert}--networkhost\\--env-fileenv.list\\-p\"8443:8443\"\\docker.repo.frg.tech/flywheel-sample:${APP_VERSION}if[\"${MeshAutoRegister,,}\"==\"true\"];thencat>\"/etc/consul.d/${APPLICATION}.json\"<<EOF{\"service\":{\"name\":\"${APPLICATION}\",\"tags\":[\"${ENV}\"],\"port\":8443}}EOFconsulreloadfi#Enableargos-agentif[[\"${SHORT_ENV_GROUP}\"==\"dev\"]];thendockerrun-d--privileged--restarton-failure:3--pid=\"host\"--ipc=\"host\"--net=\"host\"\\-eSERVICE=\"${APPLICATION}\"\\-eENV_GROUP=\"${ENV_GROUP}\"\\-eENV=\"${ENV}\"docker.repo.frg.tech/argos-agent:${ARGOS_AGENT_VERSION}fi"
